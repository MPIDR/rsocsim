[{"path":"https://mpidr.github.io/rsocsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tom Theile. Author, maintainer. Diego Alburez-Gutierrez. Author, maintainer. Mallika Snyder. Author, maintainer. Liliana P. Calderón-Bernal. Author, maintainer.","code":""},{"path":"https://mpidr.github.io/rsocsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Theile T, Alburez-Gutierrez D, Snyder M, Calderón-Bernal L (2023). rsocsim: SOCSIM R. https://github.com/MPIDR/rsocsim, https://mpidr.github.io/rsocsim/.","code":"@Manual{,   title = {rsocsim: SOCSIM with R},   author = {Tom Theile and Diego Alburez-Gutierrez and Mallika Snyder and Liliana P. Calderón-Bernal},   year = {2023},   note = {https://github.com/MPIDR/rsocsim, https://mpidr.github.io/rsocsim/}, }"},{"path":"https://mpidr.github.io/rsocsim/development.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"NA","text":"devtools::document() - generate documentation source-code comments devtools::build() - compile build package devtools::build(binary = TRUE) - compile binary devtools::check() - run tests –> can published CRAN? Runs several tests.","code":""},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"rsocsim---socsim-r-package","dir":"","previous_headings":"","what":"SOCSIM with R","title":"SOCSIM with R","text":"Socsim (‘Social Simulator’) open source stochastic microsimulation platform used produce synthetic populations plausible kinship structures using demographic rates input. stand shoulders giants: Socsim originally developed Unix UC Berkeley [1-2], mantained decades. current release rsocsim aims OS-agnostic , part, back-compatible original Socsim distribution (https://lab.demog.berkeley.edu/socsim/). rsocsim still development. might find bugs unexpected behavior, API might change without warnings next weeks. encounter error bug, happy hear issues.","code":""},{"path":[]},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"from-source","dir":"","previous_headings":"Installation","what":"From Source","title":"SOCSIM with R","text":"get latest version, need package devtools Rcpp compatible compiler installed (RTools Windows; Xcode command line tools Mac: xcode-select --install; sudo apt-get install r-base-dev Linux, according https://teuder.github.io/rcpp4everyone_en/020_install.html) install devtools R-package: can use devtools install rsocsim:","code":"install.packages(\"devtools\") devtools::install_github(\"MPIDR/rsocsim\")"},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"install-precompiled-package-windows-only","dir":"","previous_headings":"Installation","what":"Install precompiled package (Windows only)","title":"SOCSIM with R","text":"compilation source fails, can also install pre-compiled binary. might easier, might --date version. can find --date binary release https://github.com/MPIDR/rsocsim/releases","code":"url = \"https://github.com/tomthe/rsoc/releases/download/1.5.5/rsocsim_1.5.5.zip\" install.packages(url, repos = NULL, type = \"win.binary\")"},{"path":[]},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"getting-started","dir":"","previous_headings":"Use rsocsim","what":"Getting started","title":"SOCSIM with R","text":"results saved subfolder simulation-`folder´. sophisticated simulations need edit supplement file provide rate files fertility, mortality marriage rates.","code":"library(\"rsocsim\")  # create a new folder for all the files related to a simulation. # this will be in your home- or user-directory: folder = rsocsim::create_simulation_folder()  # create a new supplement-file. Supplement-files tell socsim what # to simulate. create_sup_file will create a very basic supplement filee # and it copies some rate-files that will also be needed into the  # simulation folder: supfile = rsocsim::create_sup_file(folder)  # Choose a random-number seed: seed = 300  # Start the simulation: rsocsim::socsim(folder,supfile,seed) library(\"rsocsim\")  # specify the working directory, where your supfile and ratefiles are: folder = \"D:\\\\dev\\\\r\\\\socsimprojects\\\\CousinDiversity\"   # name of the supplement-file, relative to the above folder: supfile = \"CousinDiversity.sup\"   # Random number generator seed: seed=\"33\"   # socsim starts a simulation with the specified sup-file rsocsim::socsim(folder,supfile,seed)  # if you run several simulations, previous simulations may influence/corrupt # later simulations. Use one of the options \"future\" or \"clustercall\" for # process_method to prevent this. \"future\" has problems on computers with more # than 64 cores. Note that these options prevent SOCSIM from writing to the # R-terminal.  rsocsim::socsim(folder,supfile,seed,process_method = \"future\")"},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"background-and-applications","dir":"","previous_headings":"","what":"Background and applications","title":"SOCSIM with R","text":"following description SOCSIM adapted Supplementary Materials [4]. SOCSIM open source extensible demographic microsimulation program [1,3]. written C programming language relies heavily arrays linked lists keep track kinship relationships store information simulated individuals. simulator takes input initial population files monthly age-specific fertility mortality demographic rates. individual unit analysis simulator. person subject set rates, expressed monthly probabilities events, given certain demographic characteristics, like age sex. Every month, individual faces risk experiencing number events, including childbirth, death, marriage. selection event waiting time event occurs determined stochastically using competing risk model. constraints included simulation program order draw events individuals eligible events (e.g. allow minimum interval time births mother, avoid social taboos incest, etc.). event individual risk modeled piece-wise exponential distribution. waiting time event occurs randomly generated according associated demographic rates. individual’s next event one shortest waiting time. end simulation, population files contain list everyone ever lived population created. files, individual observation rectangular data file records demographic characteristics individual, identification numbers key kinship relations. SOCSIM models “closed” populations. Individuals may enter exit simulation (simulated) birth death. SOCSIM used extensively social science research study, among things, dynamics kin availability [5-7], generational overlap [4,8], kin loss [9-11].","code":""},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"develop-the-package","dir":"","previous_headings":"","what":"Develop the package","title":"SOCSIM with R","text":"need RTools, devtools rcpp. Clone repository, change something, hit “Build–>clean rebuild” (fails package use, can restart R-session (CTRL-SHIFT-F10)). renew documentation stuff : build source binary package:","code":"devtools.document() devtools::build(binary=FALSE) devtools::build(binary=TRUE)"},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"future-plans","dir":"","previous_headings":"Develop the package","what":"Future plans","title":"SOCSIM with R","text":"Testing verification include functions package create another package loads package","code":""},{"path":"https://mpidr.github.io/rsocsim/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"SOCSIM with R","text":"Hammel, E., Hutchinson, D., Wachter, K., Lundy, R., Deuel, R. (1976). SOCSIM Demographic-Sociological Microsimulation Program: Operating Manual. University California Berkeley. Institute International Studies. Wachter, K.W. (1997). Kinship resources elderly. Philosophical Transactions Royal Society London. Series B: Biological Sciences 352(1363):1811–1817. doi:10.1098/rstb.1997.0166. Mason, Carl. (2016). Socsim Oversimplified. Accesed 24 Feb 2023 : https://lab.demog.berkeley.edu/socsim/CurrentDocs/socsimOversimplified.pdf Alburez‐Gutierrez, D., Mason, C., Zagheni, E. (2021). “Sandwich Generation” Revisited: Global Demographic Drivers Care Time Demands. Population Development Review 47(4):997–1023. doi:10.1111/padr.12436. Hammel, E.. (2005). Demographic dynamics kinship anthropological populations. Proceedings National Academy Sciences 102(6):2248–2253. doi:10.1073/pnas.0409762102. Verdery, .M. Margolis, R. (2017). Projections white black older adults without living kin United States, 2015 2060. Proceedings National Academy Sciences 114(42):11109–11114. doi:10.1073/pnas.1710341114. Murphy, M. (2011). Long-Term Effects Demographic Transition Family Kinship Networks Britain. Population Development Review 37:55–80. doi:10.1111/j.1728-4457.2011.00378.x. Margolis, R. Verdery, .M. (2019). Cohort Perspective Demography Grandparenthood: Past, Present, Future Changes Race Sex Disparities United States. Demography 56(4):1495–1518. doi:10.1007/s13524-019-00795-1. Zagheni, E. (2011). Impact HIV/AIDS Epidemic Kinship Resources Orphans Zimbabwe. Population Development Review 37(4):761–783. doi:10.1111/j.1728-4457.2011.00456.x. Verdery, .M., Smith-Greenaway, E., Margolis, R., Daw, J. (2020). Tracking reach COVID-19 kin loss bereavement multiplier applied United States. Proceedings National Academy Sciences 117(30):17695. doi:10.1073/pnas.2007476117. Snyder, M., Alburez-Gutierrez, D., Williams, ., Zagheni, E. (2022). Estimates 31 countries show significant impact COVID-19 excess mortality incidence family bereavement. Proceedings National Academy Sciences 119(26):e2202686119. doi:10.1073/pnas.2202686119.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/create_simulation_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"create a folder in the user-dir of the current user in the socsim-subfolder — create_simulation_folder","title":"create a folder in the user-dir of the current user in the socsim-subfolder — create_simulation_folder","text":"create folder user-dir current user socsim-subfolder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/create_simulation_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a folder in the user-dir of the current user in the socsim-subfolder — create_simulation_folder","text":"","code":"create_simulation_folder(simulation_name = NULL, basefolder = NULL)"},{"path":"https://mpidr.github.io/rsocsim/reference/create_simulation_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a folder in the user-dir of the current user in the socsim-subfolder — create_simulation_folder","text":"simulation_name optional name simulation basefolder optional base directory folder created","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/create_simulation_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a folder in the user-dir of the current user in the socsim-subfolder — create_simulation_folder","text":"path folder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/create_sup_file.html","id":null,"dir":"Reference","previous_headings":"","what":"create a basic .sup file for a simulation\nthe simulation is only a simple one\nthe file will be saved into the sim-folder — create_sup_file","title":"create a basic .sup file for a simulation\nthe simulation is only a simple one\nthe file will be saved into the sim-folder — create_sup_file","text":"create basic .sup file simulation simulation simple one file saved sim-folder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/create_sup_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a basic .sup file for a simulation\nthe simulation is only a simple one\nthe file will be saved into the sim-folder — create_sup_file","text":"","code":"create_sup_file(simfolder, simname)"},{"path":"https://mpidr.github.io/rsocsim/reference/create_sup_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a basic .sup file for a simulation\nthe simulation is only a simple one\nthe file will be saved into the sim-folder — create_sup_file","text":"simfolder folder sup-file saved simname name simulation","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/create_sup_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a basic .sup file for a simulation\nthe simulation is only a simple one\nthe file will be saved into the sim-folder — create_sup_file","text":"sup.fn filename supplementary file needed start simulation","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_fertility_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","title":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","text":"Given population file ('opop') generated rsocsim, function estimates age-specific fertility rates.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_fertility_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","text":"","code":"estimate_fertility_rates(   opop,   final_sim_year,   year_min,   year_max,   year_group = 5,   age_min_fert = 15,   age_max_fert = 50,   age_group = 5 )"},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_fertility_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","text":"opop R object SOCSIM microsimulation output (population file). final_sim_year numeric. Final simulated year 'real world' time ( used convert 'SOCSIM time' 'real world' time.) year_min numeric. Lower-bound year rate estimated. year_max numeric. Upper-bound year rate estimated. year_group numeric. Size year groups estimate rate (year_group=1 produce single-year estimates) age_min_fert numeric. Upper-bound age female reproductive period age_group numeric. Size age groups estimate rate (age_group=1 produce single-age estimates)","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_fertility_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","text":"data.frame age-specific fertility rates year age.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_fertility_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","text":"final_sim_year can obtained .sup file must refer real-world year. Grouped year age ranges (.e., year_group > 1 age_group > 1) created [year;year+year_group).","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_fertility_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate yearly age-specific fertility rates (ASFR) from a SOCSIM-generated\npopulation file — estimate_fertility_rates","text":"","code":"if (FALSE) { # Read opop file into global environment opop <- read_opop(path = \"my_path\") # Retrieve age-specific fertility rates asfr <- get_asfr_socsim(opop = opop,                      final_sim_year = 2021,                       year_min = 1750,                      year_max = 2020,                      year_group = 5,                      age_min_fert = 10,                      age_max_fert = 55,                      age_group = 5) }"},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_mortality_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","title":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","text":"Given population file ('opop') generated rsocsim, function estimates (yearly) age-specific mortality rates.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_mortality_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","text":"","code":"estimate_mortality_rates(   opop,   final_sim_year,   year_min,   year_max,   year_group,   age_max_mort,   age_group )"},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_mortality_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","text":"opop R object SOCSIM microsimulation output (population file). final_sim_year numeric. Final simulated year 'real world' time ( used convert 'SOCSIM time' 'real world' time.) year_min numeric. Lower-bound year rate estimated. year_max numeric. Upper-bound year rate estimated. year_group numeric. Size year groups estimate rate (year_group=1 produce single-year estimates) age_max_mort numeric. Maximum age estimating mortality. age_group numeric. Size age groups estimate rate (age_group=1 produce single-age estimates)","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_mortality_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","text":"data.frame yearly age-specific mortality rates year age.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_mortality_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","text":"final_sim_year can obtained .sup file must refer real-world year. Grouped year age ranges (.e., year_group > 1 age_group > 1) created [year;year+year_group). Mortality rates always start 0 [0,0+age_group).","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/estimate_mortality_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate yearly age-specific mortality rates (ASMR) from a SOCSIM-generated\npopulation file — estimate_mortality_rates","text":"","code":"if (FALSE) { # Read opop file into global environment opop <- read_opop(path = \"my_path\") # Retrieve age-specific mortality rates asmr <- get_asmr_socsim(opop = opop,                      final_sim_year = 2021,                      year_min = 1750,                      year_max = 2020,                      year_group = 5,                      age_max_mort = 110,                      age_group = 5) }"},{"path":"https://mpidr.github.io/rsocsim/reference/get_supplement_content.html","id":null,"dir":"Reference","previous_headings":"","what":"read the content of the supplement file — get_supplement_content","title":"read the content of the supplement file — get_supplement_content","text":"read content supplement file","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/get_supplement_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read the content of the supplement file — get_supplement_content","text":"","code":"get_supplement_content(simfolder, sup_fn)"},{"path":"https://mpidr.github.io/rsocsim/reference/get_supplement_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read the content of the supplement file — get_supplement_content","text":"simfolder base folder simulation simname name .sup-file","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/get_supplement_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read the content of the supplement file — get_supplement_content","text":"content supplement file string (TODO: Now returns list lines instead single string)","code":""},{"path":[]},{"path":"https://mpidr.github.io/rsocsim/reference/read_omar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read output marriage file into a data frame — read_omar","text":"","code":"read_omar(   folder = NULL,   supfile = \"socsim.sup\",   seed = 42,   suffix = \"\",   fn = NULL )"},{"path":"https://mpidr.github.io/rsocsim/reference/read_omar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read output marriage file into a data frame — read_omar","text":"folder simulation base folder (\"~/socsim/simulation_235/\") supfile name supplement-file (\"socsim.sup\") seed random number seed (42) suffix optional suffix results-directory (default=\"\") fn complete path file. provided, created arguments","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/read_omar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read output marriage file into a data frame — read_omar","text":"Data frame information output population file","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/read_omar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read output marriage file into a data frame — read_omar","text":"can either provide complete path file folder, supfilename, seed suffix started simulation","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/read_opop.html","id":null,"dir":"Reference","previous_headings":"","what":"Read output population file into a data frame — read_opop","title":"Read output population file into a data frame — read_opop","text":"end simulation, socsim writes every person simulation file called result.opop                                                              |","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/read_opop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read output population file into a data frame — read_opop","text":"","code":"read_opop(   folder = NULL,   supfile = \"socsim.sup\",   seed = 42,   suffix = \"\",   fn = NULL )"},{"path":"https://mpidr.github.io/rsocsim/reference/read_opop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read output population file into a data frame — read_opop","text":"folder simulation base folder (\"~/socsim/simulation_235/\") supfile name supplement-file (\"socsim.sup\") seed random number seed (42) suffix optional suffix results-directory (default=\"\") fn complete path file. provided, created arguments","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/read_opop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read output population file into a data frame — read_opop","text":"Data frame information output population file","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/read_opop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read output population file into a data frame — read_opop","text":"table explains columns opop file columns output data frame. can either provide complete path file folder, supfilename, seed suffix started simulation","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/retrieve_kin.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify members of a kin network for an individual or individuals of\ninterest. — retrieve_kin","title":"Identify members of a kin network for an individual or individuals of\ninterest. — retrieve_kin","text":"Identify members kin network individual individuals interest.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/retrieve_kin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify members of a kin network for an individual or individuals of\ninterest. — retrieve_kin","text":"","code":"retrieve_kin(   opop = opop,   omar = omar,   KidsOf = KidsOf,   pid,   extra_kintypes,   kin_by_sex )"},{"path":"https://mpidr.github.io/rsocsim/reference/retrieve_kin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify members of a kin network for an individual or individuals of\ninterest. — retrieve_kin","text":"opop R object SOCSIM microsimulation output (population file). Create object function read_opop(). omar R object SOCSIM microsimulation output (marriage file). Create object function read_omar(). pid character vector person IDs, indicating persons interest kin networks identified. extra_kintypes vector character values indicating additional types kin obtained. reasons computational efficiency, function default identify individual's great-grandparents (\"ggparents\" function output), grandparents (\"gparents\"), parents, siblings, spouse, children, grandchildren (\"gchildren\"). However, selecting one following kin types, kin network generated also include individuals: \"gunclesaunts\": Great-uncles great-aunts \"unclesaunts\": Uncles aunts \"firstcousins\": First cousins (Children uncles aunts) \"niblings\": Nieces nephews (Children siblings) \"inlaws\": Parents--law (parents spouse) brothers sisters law (siblings spouse spouse siblings) kin_by_sex logical value indicating whether output include kin relations additionally disaggregated sex relative. Setting value TRUE result additional objects generated identify individuals' relatives sex.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/retrieve_kin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify members of a kin network for an individual or individuals of\ninterest. — retrieve_kin","text":"R object containing list lists person IDs kin, organized relationship. person ID values named based person interest associated. example, list named \"parents\", values person IDs parents individuals interest. values named according children's IDs (given children , case, persons interest provided function input). kin_by_sex set TRUE extra_kintypes set c(c(\"gunclesaunts\", \"unclesaunts\", \"firstcousins\", \"niblings\", \"inlaws\")), full list kin relations identified : \"ggparents\": great-grandparents \"ggmothers\": great-grandmothers \"ggfathers\": great-grandfathers \"gparents\": grandparents \"gmothers\": grandmothers \"gfathers\": grandfathers \"gunclesaunts\": great-uncles great-aunts \"guncles\": great-uncles \"gaunts\": great-aunts \"parents\": parents \"mother\": mother \"father\": father \"unclesaunts\": uncles aunts (siblings parents) \"uncles\": uncles \"aunts\": aunts \"siblings\": siblings \"sisters\": sisters \"brothers\": brothers \"firstcousins\": first cousins \"firstcousinsfemale\": female first cousins \"firstcousinsmale\": male first cousins \"children\": children \"daughters\": daughters \"sons\": sons \"gchildren\": grandchildren \"gdaughters\": granddaughters \"gsons\": grandsons \"niblings\": nephews nieces \"nieces\": nieces \"nephews\": nephews \"spouse\": spouse (based final marriage, case multiple marriages) \"parentsinlaw\": parents--law \"motherinlaw\": mother--law \"fatherinlaw\": father--law \"siblingsinlaw\": brothers sisters law \"sistersinlaw\": sisters--law \"brothersinlaw\": brothers--law","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/retrieve_kin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify members of a kin network for an individual or individuals of\ninterest. — retrieve_kin","text":"","code":"if (FALSE) { #Individuals of interest pid <- c(\"10111\", \"10211\", \"10311\") #Obtain partial kinship network, with omar and opop already in R environment kin_network <- getKin(opop = opop, omar = omar, pid = pid,  extra_kintypes = c(\"unclesaunts\", \"niblings\"), kin_by_sex = TRUE) }"},{"path":"https://mpidr.github.io/rsocsim/reference/rsoc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SOCSIM Package for R. Run Social microsimulations directly from R. — rsocsim-package","title":"SOCSIM Package for R. Run Social microsimulations directly from R. — rsocsim-package","text":"package makes easy install socsim, run simulations,   read results.","code":""},{"path":[]},{"path":"https://mpidr.github.io/rsocsim/reference/rsoc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SOCSIM Package for R. Run Social microsimulations directly from R. — rsocsim-package","text":"Maintainer: Tom Theile <theile@mpidr.de>  Diego  Alburez-Gutierrez <alburezgutierrez@demogr.mpg.de>","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/rsoc-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SOCSIM Package for R. Run Social microsimulations directly from R. — rsocsim-package","text":"optional section can contain literature references   background information.","code":""},{"path":[]},{"path":"https://mpidr.github.io/rsocsim/reference/rsoc-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SOCSIM Package for R. Run Social microsimulations directly from R. — rsocsim-package","text":"","code":"if (FALSE) {      ## Optional simple examples of the most important functions      ## These can be in \\dontrun{} and \\donttest{} blocks.      }"},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_from_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single socsim-simulation with a socsim binary.\nthe place\nThe results will be saved into that folder — run1simulationwithfile_from_binary","title":"Run a single socsim-simulation with a socsim binary.\nthe place\nThe results will be saved into that folder — run1simulationwithfile_from_binary","text":"Run single socsim-simulation socsim binary. place results saved folder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_from_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single socsim-simulation with a socsim binary.\nthe place\nThe results will be saved into that folder — run1simulationwithfile_from_binary","text":"","code":"run1simulationwithfile_from_binary(   folder,   supfile,   seed = \"42\",   compatibility_mode = \"1\",   socsim_path = NULL )"},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_from_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single socsim-simulation with a socsim binary.\nthe place\nThe results will be saved into that folder — run1simulationwithfile_from_binary","text":"folder base-directory simulation. supfile .sup file start simulation, relative folder seed RNG seed string, Default=\"42\" socsim_path path+filename socsim-executable. Download one https://github.com/tomthe/socsim/releases/download/0.3/socsim.exe rootfolder rootfolder...","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_from_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single socsim-simulation with a socsim binary.\nthe place\nThe results will be saved into that folder — run1simulationwithfile_from_binary","text":"results written specified folder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_inprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a socsim-simulation in the r-process — run1simulationwithfile_inprocess","title":"Run a socsim-simulation in the r-process — run1simulationwithfile_inprocess","text":"Run socsim-simulation r-process","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_inprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a socsim-simulation in the r-process — run1simulationwithfile_inprocess","text":"","code":"run1simulationwithfile_inprocess(   folder,   supfile,   seed,   compatibility_mode = \"1\",   suffix = \"\" )"},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_inprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a socsim-simulation in the r-process — run1simulationwithfile_inprocess","text":"supfile .sup file start simulation seed RNG seed rootfolder rootfolder  name simulation","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/run1simulationwithfile_inprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a socsim-simulation in the r-process — run1simulationwithfile_inprocess","text":"results written specified folder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/simulation_time_to_years.html","id":null,"dir":"Reference","previous_headings":"","what":"simulation_time_to_years\nconvert the time measures. — simulation_time_to_years","title":"simulation_time_to_years\nconvert the time measures. — simulation_time_to_years","text":"simulation_time_to_years convert time measures.","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/simulation_time_to_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulation_time_to_years\nconvert the time measures. — simulation_time_to_years","text":"","code":"simulation_time_to_years(simulation_time, pre_simulation_time, start_year)"},{"path":"https://mpidr.github.io/rsocsim/reference/simulation_time_to_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulation_time_to_years\nconvert the time measures. — simulation_time_to_years","text":"simulation time pre-simulation-time long simulation ran get stable population start-year year simulation started","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/simulation_time_to_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulation_time_to_years\nconvert the time measures. — simulation_time_to_years","text":"year, number like 2022.2","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/socsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single socsim-simulation with a given supplement-file and folder.\nThe results will be saved into that folder — socsim","title":"Run a single socsim-simulation with a given supplement-file and folder.\nThe results will be saved into that folder — socsim","text":"Run single socsim-simulation given supplement-file folder. results saved folder","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/socsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single socsim-simulation with a given supplement-file and folder.\nThe results will be saved into that folder — socsim","text":"","code":"socsim(   folder,   supfile,   seed = \"42\",   process_method = \"inprocess\",   compatibility_mode = \"1\",   suffix = \"\" )"},{"path":"https://mpidr.github.io/rsocsim/reference/socsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single socsim-simulation with a given supplement-file and folder.\nThe results will be saved into that folder — socsim","text":"folder base-directory simulation. Every SUP- rate-file named relative folder. supfile .sup file start simulation, relative folder seed RNG seed string, Default=\"42\" process_method specify whether SOCSIM started process running R process. Use one \"inprocess\" - SOCSIM runs R-process. Beware run several different simulations - may affect later simulations \"future\" - safest option. new process start via \"future\" package \"clustercall\" - future package available, try method instead","code":""},{"path":"https://mpidr.github.io/rsocsim/reference/socsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single socsim-simulation with a given supplement-file and folder.\nThe results will be saved into that folder — socsim","text":"results written specified folder","code":""},{"path":[]},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of Content","title":"SOCSIM oversimplified","text":"Table Content simplest possible simulation goes inside Groups two queue system one queue system Age distribution matching practice … Age preference Minimal .sup file Global Directives 14. 15 Directives used extended versions Segment specific directives Reckoning kinship Reference marriages Reference transition history Reckoning marriages Transition history files Rate default rules Structure vital rates Mortality rates Marriage rates Divorce rates Fertility rates Duration specific transition rates Event competition Generating potential waiting times Fertility multiplier (fmult) Inheritance Fertility Multipliers","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"first-encounter","dir":"","previous_headings":"","what":"First Encounter","title":"SOCSIM oversimplified","text":"Originally written 1970s, Socsim continues develop research tool constantly changing meet goals new research projects. slick graphic user interface never part plan1. consequence, users must comfortable editing ascii files order use socsim. Raising barrier first use still higher Socsim’s insatiable appetite input data. micro-simulation simulating whole mess “individuals”’ vital demographic events, Socsim needs whole mess age, sex, marital status, group2 parity specific rates births, deaths, marriages change group membership. course, default structure – example mortality rates specified married males, Socsim default use single males group. parity specific fertility rates specified, Socsim use rates parities. Still, moderately complicated simulation still require astonishing number rates.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"the-simplest-possible-simulation","dir":"","previous_headings":"","what":"The simplest possible simulation","title":"SOCSIM oversimplified","text":"run Socsim must provide following: compiled version Socsim. See lab.demog.berkeley.edu/socsim already taken care . initial population marriage file. Socsim reads writes Population data specific format. Population (.opop files) described Section 5. order Socsim start, must find initial population stored format. Generally individuals population married, initial population marriage structure, marriage file (.omar) also required. marriage file format described Section [tab:marriagefile]. initial population need particular age sex distribution3, since one usually runs Socsim hundred (simulated) years order convert initial population population known stable age structure simulating processes real interest. can done differently, without added complication. supervisory .sup file. supervisory file generally named .sup suffix passed Socsim command line. must contain certain global parameters number simulation segments, name patterns initial population final population files, either complete set vital demographic rates else include statements specifying find files containing rates. full explanation .sup file Section 4. minimal file, (Sample directory source code tree) shown Figure [fig:supSample]. vital demographic rates noted previously, vital demographic rates can included within supervisory file. generally convenient store one separate files referred supervisory file include directive. format rates given Socsim critical. Generally set rates particular demographic event begins identifier : birth 1 F married 0 indicates following several lines contain complete set age specific fertility rates group 1 married females parity 0. Following rate identifier one lines contains three space-separated numbers. first two indicate year months upper age bound rate effect. two quantities added together “1 1” equivalent effect “0 13”. Note first age category specified “0 0” upper bound; upper age bound “0 1” include first month life . Age categories otherwise flexible; one can specify age categories short single month, others many years decades wide. rate, given per month terms, third number. Socsim insists line specifying age category upper bound 100 years. Obviously last rate can 1 zero. rates can now end earlier later 100 years. later 200 years. details specifying rates See Section 8. bits place, Socsim can executed Unix shell:/path//socsim supervisoryfile.sup 12345 result considerable amount screen output indicating options set simulation proceeding. just short complaint inconsistency various input files. successful socsim run, logfile called /usersupervisoryfile.sup12345.log evident current directory well output population .opop; marriage, .omar perhaps extra variables, .opox file whose locations depend output_file directive .sup file. Socsim also write event history file .opop, .omar .opox files produced Socsim run, course suitable initial population files(s) subsequent Socsim simulations. Eventually however, probably stop simulating start analyzing files. See Sections 5and 6 details files structured.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"what-goes-on-inside","dir":"","previous_headings":"","what":"What goes on inside","title":"SOCSIM oversimplified","text":"“information” scrolling past screen filling log file, Socsim busily scheduling executing vital demographic events simulated initial population well descendants. Socsim begins simulation segment4 scheduling event “living” person. times simulation every non dead simulated exactly one scheduled event. Whenever event executed person’s marital status parity changes, new event scheduled individual. Thus death spouse causes new event scheduled widow; birth causes new event scheduled child mother. determine event person scheduled , Socsim generates random waiting time event person risk . Obviously user supplied age, sex, group, marital status specific rates govern process random waiting time generation. potential events randomly generated waiting times associated , earliest one chosen event scheduled. Information possible events discarded. short, ’s competing risks model. probability event independent events earliest event one counts. See Section 8.8 details. person scheduled event, Socsim starts march time. list created events scheduled first month simulation segment drawn random order executed. execution event causes new event scheduled () resulting new event either placed calendar execution future month waiting time zero, inserted list events waiting execution current month drawn random order. events scheduled current month executed, Socsim increments month repeats event execution procedure just lined. last month segment completed, Socsim begins next segment reading rate files generating new events living people. subsequent segment, Socsim finishes writing population (.opop), marriage (.oar), extra variables (.opox), population pyramid (.pyr) files.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"extending-socsim-outdated","dir":"","previous_headings":"","what":"Extending Socsim (outdated!)","title":"SOCSIM oversimplified","text":"Socsim open source modifying code take account cultural norms, ethnological truths, behavioral theories encouraged. Since many Socsim based research projects require kind enhancement, program structured encourage modification. possible enhance Socsim without first gaining deep knowledge intricacies program taking advantage “hooks” placed code call functions key points execution. “Stub” versions functions can found enhancementNULL.c file top source tree. Socsim compiled proper command line arguments, functions enhancement.c become part code. modifications can contained within enhancement.c, improvements bug fixes main trunk code conflict project – probably. consider enhancing Socsim, however, first give lot serious thought might manage accomplish goal without writing C code. One approach try make clever use concept groups, described . Another approach email Carl Mason (carlm@demog.berkeley.edu) see maybe ’ll programming .","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"groups","dir":"","previous_headings":"","what":"Groups","title":"SOCSIM oversimplified","text":"Socsim implements groups simply adding variable population list. Every person member exactly one group times. Group membership determined birth according rule given child_inherits_group directive, can change time according age, sex, marital status, group specific transition rates user specifies. group designation can thought ethnicity, location, health status, wealth, education characteristic person might might change according rate schedule. Members group subject rates vital events. members group 7 fertility, mortality nuptiality schedules independent group 8. individual transitions one group another, becomes subject new group’s rates therefore must new event scheduled. Socsim determines many groups simulation beginning segment looking starting population rates. Socsim finds person group N initial population knows least N groups simulation. finds mortality rate members group Q knows least Q groups. default pattern rates described Section 8, possible add groups simulation specify rates group differ existing group.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"marriage-market","dir":"","previous_headings":"","what":"Marriage Market","title":"SOCSIM oversimplified","text":"marriage event greatly complicated need two spouses. 27 year old female’s marriage event comes , must suitable male hand5 else marriage executed time. need two spouses means randomness alone inadequate assuring specified marriage rates achieved. generally, one can meet two following three marriage market constraints: Female age specific nuptiality rates Male age specific nuptiality rates Distribution spousal age differences Thus compromise necessary Socsim offers choice two: “one” queue “two” queue system. two queue system male female nuptiality rates determine beginning marriage search: egos initiated marriage searches can married system. suitable potential spouses available, searcher must wait queue. suitable spouse must waiting order marriage event executed, generally one two spouses must getting married delay time since beginning search. one queue system, females nuptiality rates. marriage event executed system, lucky bride chooses best match living unmarried males. Thus one queue system, female nuptiality rates generally met, marriage markets can made optimize selections even rare criteria. unmodified version Socsim, distribution age difference spouses considered, principle scoring algorithm made optimize set criteria. cost however (1) male marriage rates can specified – males one queue scheme marry convenience females – (2) processing slower especially populations large.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"the-two-queue-system","dir":"","previous_headings":"","what":"The two queue system","title":"SOCSIM oversimplified","text":"legacy “two queue” scheme, marriage event signals beginning marriage search. suitable spouse already waiting marriage queue, marriage executed. , ego’s marriage search fails added marriage queue –wait (subject risk events) “selected” male suitor initiating marriage search. scheme, specified nuptiality rates seldom accomplished spouses often spend time marriage queue. scheme symmetric respect sex. marriage queue sex sex treated identically. , marriage search initiated, potential spouses waiting queue potential match fist checked allowability via marriage_allowable() function , match violate incest rules potential spouses previously married, match evaluated score3() function highest scoring match executed.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"the-one-queue-system","dir":"","previous_headings":"","what":"The one queue system","title":"SOCSIM oversimplified","text":"second (newer) scheme “one queue” system female marriage event triggers search across available males “best” one immediately selected. Potential matches evaluated way two queue system (via score3() function), many potential matches evaluated event. main advantage one queue system generally achieves specified female age specific marriage rates –even female rates high populations small. Achieving female marriage rates allows overall fertility rates achieved marital non marital fertility rates different. major headache preventer. second advantage one queue system allows wider range marriage criteria optimized. course requires Socsim extended (See Section 2), since one queue system every marriageable male examined female marriage event, even spouses qualities quite rare population can located. two queue scheme one can choose best spouse already initiated completed marriage search. can quite unsatisfactory example simulation marriage market optimal spouse particular type cousin.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"evaluating-potential-marriages-score3","dir":"","previous_headings":"","what":"Evaluating potential marriages (score3())","title":"SOCSIM oversimplified","text":"Regardless marriage queue system enabled, potential marriages fist screened marriage_allowable() scored score() function. marriage_allowable()function, eliminates consanguineous marriages closer cousins remarriage spouses previously married . Potential allowable marriages evaluated score3() function. two variants built Socsim, hooks included code make modification evaluation process “easy”.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"age-distribution-matching","dir":"","previous_headings":"Evaluating potential marriages (score3())","what":"Age distribution matching","title":"SOCSIM oversimplified","text":"marriage_eval set “distribution” Socsim seeks select marriage reduces disparity target distribution age differences marriage observed distribution age differences marriage. score3() function keeping track spousal ages marriage marriages simulation segment well predetermined target distribution. potential marriage assigned score indicates degree fit target observed distribution changed marriage question. marriage reduces unweighted sum differences fractions marriages conducted spousal age difference (single years) chosen. variant intended used one-queue system living unmarried males potential partners. situation , female rates parameters target spousal age distribution determine marriage events. words, age distribution matching scheme together “one queue” marriage market attempts optimize distribution spousal age differences subject constraint females marry according rate schedule. age distribution matching scheme paired two-queue marriage market, constraint set much complicated results uncertain. Mechanically, age distribution matching scheme implemented following way: beginning simulation segment, vector “target” proportions age distributions constructed simulation group. vector derived normal distribution parameters: agedif_marriage_mean agedif_marriage_sd. sums 1 represents desired fraction marriages women group particular age difference time marriage. marriage queue consists linked list males(females) eligible. one-queue system males presently married. two-queue system, consists males (females) unsuccessful marriage events–marriage event triggered marriage search suitable spouse available time. Note marriage evaluation scheme intended used one-queue marriage market male put queue birth upon execution event subsequently makes marriage eligible (e.g. divorce death spouse). one-queue system: female marriage event, two-queue: system ego either sex initiates marriage search, potential partnership given score based age difference potential groom bride. score derived Equation [eq:mscore]. Note score can either positive negative. match highest score chosen. one match score, one chosen random. result (intention) match reduces difference target observed distribution age differences marriage one selected. Socsim can extended use additional information scoring algorithm. [ ] marriage executed, counts marriages female group age difference incremented. end simulation, accrued differences target actual marriage age differences reported.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"in-practice-","dir":"","previous_headings":"Evaluating potential marriages (score3())","what":"In practice …","title":"SOCSIM oversimplified","text":"’distribution’ system marriage evaluation can theory match female age specific marriage rates specified distribution age differences marriage, “reality” many ways defeating scientist: Remarriage widows divorcees: high mortality populations widows remarry, – particularly old widows, average age difference marriage can wind low shape age difference distribution can diverge normal. Large mean age differences difficult achieve. birth cohorts roughly equal size difficult sustain symmetric distribution age difference marriage mean far zero–unless large fraction people never marry. Beware exogamy marriages happen members different groups different groups significantly different vital rates, lot strange things might happen. Socsim manage age difference distribution separately group – female perspective. marriage age difference distribution group N refers distribution age differences marriage (groom -bride) marriages involving female group N. male’s group membership considered.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"age-preference","dir":"","previous_headings":"Evaluating potential marriages (score3())","what":"Age preference","title":"SOCSIM oversimplified","text":"marriage_eval set “preference”, score3() implements “simple” age preference schedule. system, potential marriage evaluated according fixed preference scheme. Marriages preferred according close spouses age marriage_peak_age attention paid realized distribution marriages. incest endogamy/exogamy checks complete, suitors eliminated, assigned score based groom’s age - bride’s age. age difference greater marriage_peak_age score declines constant rate difference increases. age difference less marriage_peak_age score declines marriage_slope_ratio* constant rate age difference decreases. giving bald spot , note ordinal rank score matters spouse chosen randomly among maximum scoring suitors. idea simply favor certain optimal age difference allow preference older younger spouses. simulations marriage rates – determine age people initiate marriage search, far important determining marriage patterns marriage preference parameters. default value marriage_peak_age 36 months. marriage_slope_ratio parameter determines degree groom-older marriages preferred bride-older marriages. value 1.0 implies equal preference score age difference x months marriage_peak_age regardless whether groom bride older. value greater 1 implies preference score decline faster brides age increases relative grooms – groom’s age increases relative bride’s. default value, 2, means preference scores decline twice fast distance marriage_peak_age bride’s age increases relative groom’s. marriage_agedif_max marriage_agedif_min simply exclude consideration marriages age difference partners (groom age - bride age) beyond specified bounds. possible use evaluation scheme one-queue marriage market, tested . system intended used two-queue system.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"supervisory-and-rate-files","dir":"","previous_headings":"","what":"Supervisory and rate files","title":"SOCSIM oversimplified","text":"name supervisory file, generally .sup suffix, passed Socsim command line. Socsim expects filename followed random number seed run without two command line arguments. Socsim expects find supervisory file set parameters possibly rate specifications allow run simulation. supervisory file either contain information Socsim needs (aside random number seed) else must include directives tell Socsim else look. .sup file must consist entirely valid directives comment lines. Comments lines begin ’*’. Comments ignored Socsim. .sup file includes global (affecting entire simulation) segment specific simulation parameters. run directive indicates end set segment specific parameters. Socsim encounters run directive, stops reading .sup file executes simulation segment. segment’s execution complete, Socsim returns reading .sup file left . two important implications: directives segment followed run directive, segment executed. Socsim simply read instructions next segment execute – assuming end run directive. Errors .sup file caught encountered. error specification (92^{nd}) segment, Socsim execute first 91 segments exiting abnormally.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"minimal-sup-file","dir":"","previous_headings":"","what":"Minimal .sup file","title":"SOCSIM oversimplified","text":"minimum supervisory file must include directives. Figure fig:supSample shows minimal sufficient .sup file.","code":"************************************************************************ ** This is the simplest possible socsim .sup file. It will run a one ** segment simulation with starting population in test.opop and ** test.omar and ending population in test.out{.opop,.omar} The ** duration of the one and only \"segment\" is 1200 months; the minimum ** birth interval is 24 months; heterogenous fertility is turned off; ** rate files are in ratefile.Lese. ** ** type [path to socsim] run.sup 12345 ** to run socsim ************************************************************************ segments 1 input_file test output_file test.out duration 1200  include ratefile.Lese run"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"global-directives","dir":"","previous_headings":"","what":"Global Directives","title":"SOCSIM oversimplified","text":"Global directives can affect entire simulation generally change new segment. exception segments, input_file output_file, however, possible change global directives simulation segment. “global” means socsim reinitialize directives default settings beginning simulation segment–“segment specific” directives described Section 4.4. means can change global directives within simulation segment. Socsim finds global directive bint sex_ratio first run directive, change behavior accordingly new behavior persist either end simulation directive encountered . aware decide change global directive particular segent, new value becomes default subsequent simulation segments. case segment specific directives, default values reset start new segment. output_file resultspop Indicates Socsim write output files. Just input_file directive, Socsim expects argument file stem, Socsim can construct complete path simply appending suffix. default, population marriages files written end final segment called output-file-stem.opop output-file-stem.omar. However, write_output directive causes files written end segment modifies naming conventions avoid overwriting.  alpha 1.0beta 0.0 Determine degree fertility multiplier inherited woman’s mother. See Section [secfmult] complete description.  bint 9 minimum birth interval. concession reality, Socsim can impose minimum number months births. humans 9 months good number use. Socsim adjusts specified fertility rates upward compensate birth interval.  marriage_eval preference Determines method evaluating potential marriages. “preference” indicates legacy age difference preference schedule used. scheme favors marriages based closeness ideal age difference. (See marriage_peak_age marriage_slope_raio). “distribution” indicates socsim attempt match target distribution age difference spouses marriage. See agedif_marriage_mean agedif_marriage_sd. Also see Section 3.3 lengthier explanation .  marriage_peak_age 36 Determines (together marriage_slope_ratio) preference spousal age difference (months) among spouses. valid marriage_eval set “preference”. See Section 3.3 details. marriage_agedif_max 120 Determines upper end permissible age difference spouses (groom age - bride age), months. valid marriage_eval set “preference” See Section 3.3 details.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"directives-used-in-extended-versions","dir":"","previous_headings":"","what":"Directives used in extended versions","title":"SOCSIM oversimplified","text":"directives included convenience extending SOCSIM. plain version SOCSIM, none directives set. parameter0 parameter5 set enhanced version Socsim using defines . Causes Socsim read file called input-file-stem.opox crash file exist. .opox file contains set extra variable values person initial population. generally used versions Socsim modified. See Section sec:modification description programming hooks available “easy” modification. plain vanilla version Socsim use extra variables reading generally cause anything useful happen. Determines number variables read person .opox file. generally made default one modifies Socsim. unmodified state, Socsim use extra variables, directive infrequently looking .","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"segment-specific-directives","dir":"","previous_headings":"","what":"Segment specific directives","title":"SOCSIM oversimplified","text":"directives make sense specified simulation segment. Determines duration months current simulaion segment. Socsim read parse filename part current file. strongly recommended include used keep rate specifications separate rest simulation parameters. See Section 8 details vital demographic rates specified. specified command passed Unix shell output routed screen. command exits without error, Socsim returns processing current file. possible directive call external program might perhaps generate rate sets fly perhaps response previous simulation segment. example:","code":"execute generate_rates 1 5 0 >mortality.seg4   include mortality.seg4"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"population-files","dir":"","previous_headings":"","what":"Population files","title":"SOCSIM oversimplified","text":"Socsim reads writes everything knows people two files: population .opop file marriage .omar file6. space delimited files contain numbers. Since one generally runs Socsim 200 simulated years order start population known stable age structure, seldom necessary construct initial population information age sex small number individuals. file can easily constructed spreadsheet program. coresponding marriage file simply empty file correct name. One needs come terms structure .opop .omar files much detail analyzing simulation output. snipet code reading .opop file R given Figure [fig:readOpop]. terms R .opop file’s contents fit naturally data.frame 14 columns numerical. general terms, .opop file matrix row contains information single person column contains particular bit infromation person. Although ’s structure suggests .opop file might right home spreadsheet program, . First files tend large since include row person ever lived. Even modest sized simulation can easily 100,000 rows. important, much information .opop file consists identification numbers people. words opop file multiply linked list. manipulating linked lists, spreadsheets profoundly suboptimal. [fig:readOpop] cases, .opop file sorted order person id since person ids sequential integers assigned birth order means .opop file generally sorted birth order, row number often person id. however guaranteed case check relying it7 . Table tab:opop shows information column. contents format .opop file","code":"## read .opop into dataframe the .opop file contains one row for each ## simulated person who ever \"lived\". It generally includes many who ## \"died\" long ago.  opop<-read.table(file=\"../SimResults/example.opop\",header=F,as.is=T)  ## assign names to columns names(opop)<-c(\"pid\",\"fem\",\"group\",                \"nev\",\"dob\",\"mom\",\"pop\",\"nesibm\",\"nesibp\",                \"lborn\",\"marid\",\"mstat\",\"dod\",\"fmult\")"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"reckoning-kinship","dir":"","previous_headings":"","what":"Reckoning kinship","title":"SOCSIM oversimplified","text":"analyzing Socsim output, one often interested reckonning kinship. Since possible exception initial population, everyone socsim related everyone else, possible find nearly two people’s relationship following chain parents siblings. find ego’s maternal grandmother, one simply finds ego’s mother’s person id (6^{th}) column ego’s row opop file. Moving row opop file coresponding ego’s mother’s person id, one look’s (6^{th}) column find egos’ mother’s mother’s person id. find ego’s children, one starts person id ego’s last born child (stored column 10) egos’ row opop. row coresponding ego’s last born child’s row opop, find, column 8 (9), ego’s last born child’s next eldest sibling mother (father). person’s row .opop file, can find yet another next eldest sibling find ego’s first born child, whose next eldest sibling mother (assuming ego female) necessarily zero. Alternatively, one simply collect rows opop value column 6 (mom) 7(dad) ego . R computing environment (http://www.r-project.orgis particularly well suited kind analysis kinship.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"reference-to-marriages","dir":"","previous_headings":"","what":"Reference to marriages","title":"SOCSIM oversimplified","text":"Since individuals can married (simultaneously cases) reckoning marriage information trickier working kinship alone. See Section [marriageFile] details work Socsim’s .omar file. present purpose note column 11 .opop file contains pointer, form marriage id number, ego’s recent marriage. column 11 zero, ego never married.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"reference-to-transition-history","dir":"","previous_headings":"","what":"Reference to transition history","title":"SOCSIM oversimplified","text":"simulation includes group transitions, socsim write file path population marriage files suffix .otx. transition events unique ids marriages, transition record contains person id protagonist. Consequently much natural link transition history population file. Section [otxFile] describes otx file detail.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"the-marriage-file","dir":"","previous_headings":"","what":"The marriage file","title":"SOCSIM oversimplified","text":"marriage (.omar) file similar population (.opop) file much information maintains form unique id numbers corespond rows .opop file .omar file . words, .omar file another linked list Figure [fig:readOmar] shows snippet R code suitable reading .omar file. Table [tab:marriagefile] shows meaning column file.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"reckoning-marriages","dir":"","previous_headings":"","what":"Reckoning marriages","title":"SOCSIM oversimplified","text":".opop file, reckoning marriage histories requires following list integers one record (row) another. marriage id wife’s recent prior marriage stored column 7. coresponding pointer husband stored column 8. six columns marriage record hold information marriage . Note marriages created sequentially, monogamy assumed. particular marriage record, wife’s prior marriage (pointed column 7) must start date (column 4) larger (later) particular marriage. “prior marriage” must start (socsim, least month) subsequent marriage. true marriage end date, stored column 5. Also, careful zeros. Marriages remained intact simulation ended end dates zero. find female ego’s first husband, one begins .opop file. (11^{th}) column ego’s row holds marriage id egos recent marriage. row .omar file whose first column entry matches number record egos’ recent “last” marriage. order find first marriage, must locate row .omar file wherein entry column 1 matches marriage id wifes prior marriage stored column 7 .omar file. repeat proces locate record marriage ego’s person id stored second column column 7 holds zero. R, efficient way finding first marriages select subset marriages either husband’s prior wife’s prior marriage (column 7 column 8) zero, use match() function link marriage id husband wife’s opop record. Figure [fig:firstMarriages] shows snippet R code performs task. labelfig:readOmar Structure Socsim marriage file Figure 4: R code finding first marriages labelfig:firstMarriages","code":"omar<-read.table(file=\"../SimResults/example.omar\",header=F,as.is=T) names(omar)<-c(\"mid\",\"wpid\",\"hpid\",\"dstart\",\"dend\",                \"rend\",\"wprior\",\"hprior\")     rownames(omar)<-omar$mid ## get first marriage id -- socsim stores marriage ids as linked list ## headed by most recent marriage.  The (h/w)prior field stores the id ## of each spouses prior marriage  ## select a subset of marriages which are first for at least one partner fomar<-omar[omar$hprior == 0 | omar$wprior == 0,] opop$fmid<-NA  ## use match() to lookup the marriage id of each person (in opop)'s ## first marriage id opop[opop$fem==0,\"fmid\"]<-   fomar[match(opop[opop$fem==0,\"pid\"],fomar$hpid),\"mid\"] opop[opop$fem==1,\"fmid\"]<-   fomar[match(opop[opop$fem==1,\"pid\"],fomar$wpid),\"mid\"]"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"transition-history-files","dir":"","previous_headings":"","what":"Transition history files","title":"SOCSIM oversimplified","text":"group transitions part simulation socsim write (may read) transition history file. spirit, otx file much like marriage file, main differences file linked one person unique identifier transition history record. Like Socsim output files, otx file space delimited contains numbers. Table [tab:otxformat] shows structure otx file. Figure [fig:otxread] contains R code reading otx file data frame. Table 3: Contents format .otx file Figure 5: R code reading otx file:","code":"otx<-read.table(file=\"../SimResults/test.otx\",header=F,as.is=T) names(otx)<-c(\"pid\",\"month\",\"fromg\",\"tog\",\"pnum\")"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"specifying-demographic-rates","dir":"","previous_headings":"","what":"Specifying demographic rates","title":"SOCSIM oversimplified","text":"convenient store demographic rates simulation segment distinct files use include directive reference supervisory file (See Section 4). regardless choose organize rate files, need assemble large collection rates. Socsim expects rates formatted described Section 8.2, get Section 8.1 describes rules Socsim follows encounters incomplete rate sets. important understand, Socsim warn example leave fertility rates parity 1 divorced females group 3 (birth 3 F divorced 1). Instead, “defaults” rates party 0 divorced females group 3 (birth 3 F divorced 0). Similarly birth 3 F divorced 0 rates missing, Socsim uses birth 3 F single 0) place. rules fairly intuitive, important understand one can err specifying certain rates zero.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"rate-default-rules","dir":"","previous_headings":"","what":"Rate default rules","title":"SOCSIM oversimplified","text":"run moderately realistic simulation, Socsim requires age specific fertility rates females mortality rates males females group marital status. rates differ marital status group can use Socsim’s default rules avoid entering blocks rates repeatedly. Socsim encounters incomplete rates sets, follows set rules determine blanks filled . Figure [fig:rateDefaults] shows rules Socsim uses encounters incomplete rate sets. “==>” symbol Figure [fig:rateDefaults] means “defaults ” example, appears “Fertility Rates” section heading “parity zero women group 1” indicates Socsim find fertility rates parity zero, widowed females group 1 “default ” rates divorced women parity zero group 1. Figure [fig:rateDefaults] indicates rate block defaults “Zero”, Socsim default anything leaving events zero probability occurring age. example, unless think single males group 1 live forever, must specify mortality rates “people”. [fig:rateDefaults] Fertility Rates Marriage, Divorce Mortality Rates Group Transition Rates","code":"widowed                  ==> divorced; parity 0; group 1 For parity zero women in group 1  -------------------------------- single                          ==> Zero married                         ==> Zero divorced                        ==> single; parity 0; group 1 widowed                         ==> divorced; parity 0; group 1 cohabiting                      ==>  married; parity 0; group 1  For women in group 1 with higher parity ------------------------------------------ mstatus m; PARITY P; group 1     ==> mstatus m; PARITY P-1; group 1  For women of any parity and any group > 1  mstatus m; parity  p; GROUP  G   ==>  mstatus m; parity p; GROUP G-1 For men and women in group ----------------------------------- DEATH    for single; sex s; group 1       ==> Zero MARRIAGE for single; sex s; group 1       ==> Zero DIVORCE  for mstatus m; sex s; group 1    ==> Zero    (Events except for divorce) ----------------------------- event e for divorced;sex s    ==>  event e; for single;sex s;group 1   event e for widowed;sex s     ==>  event e; for divorced;sex s;group 1   event e for married;sex s     ==>  event e; for widowed;sex s;group 1   event e for cohabitting;sex s ==>   event e; for married;sex s;group 1    For Groups > 1 -------------- event e for mstatus m;sex s; group g ==> event e for mstatus m;sex s; group g-1 TRANSITTION to group H for mstatus m;sex s; group g == Zero"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"structure-of-vital-rates","dir":"","previous_headings":"","what":"Structure of vital rates","title":"SOCSIM oversimplified","text":"format Socsim expects find rates simple. block rates begins set keywords indicate event rates apply marital status, sex, group membership possibly parity people risk experiencing event. information followed subsequent lines rate values upper bound age group rate force. rate block complete set age specific rates governing demographic event people particular sex,group marital status. example rate block shown Figure [fig:rateBlock]. first line comment line, indicates event (death); group (1); sex (M=male); marital status (single) rate block pertains . order matters always, Event group sex marital status. case birth rates may followed number indicating parity. case transition rates, line must end number indicating destination group. subsequent line contains one month rate (case fertility) one month probability case events, age interval monthly rate (probability) holds. first two numbers line years months upper age bound. added together 1 11 mean 23 months. third number rate. case fertility represents expected number births per month woman survives end given age interval. Specifically – interval includes upper age bound given previous line ends just upper age bound given current line. Figure [fig:rateBlock] shows example rate block. first line indicates rates follow refer mortality group 1 single males (death 1 M single). first first rate line (0 1 .0460940) indicates probability death first month life males (technically never married males) .0460940. Note rate line upper age bound “0 0” meaningless ignored. careful specifying infant mortality rates. Taking another line Figure [fig:rateBlock], probability single male dies ages 1141 1200 months, conditional survived beginning age interval (1-(1-.08326)^{60}). [fig:rateBlock]","code":"*Mortality, single Male (lines beginning with * are comments) death 1 M single 0       1       .0460940 0       12      .0057540 0       60      .0008730 0       120     .0002600 . . . 0       1140    .0832630 0       1200    .0832630"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"mortality-rates","dir":"","previous_headings":"","what":"Mortality rates","title":"SOCSIM oversimplified","text":"Mortality rates straight forward rates Socsim uses. example Figure [fig:rateBlock] typical. event identifier death, “1” refers group, “M” male “single” course marital status.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"marriage-rates","dir":"","previous_headings":"","what":"Marriage rates","title":"SOCSIM oversimplified","text":"Marriage rates specified event identifier marriage, born mind event rates regulate really marriage rather commencement marriage search. Since marriage requires two participants Socsim simply execute marriage event scheduled. Marriage requires two participants difficult achieve arbitrarily specified marriage rates males females. marriage age distribution also part simulation, gets even harder. Socsim deals variety ways described Section 3 Section 4. consequence, excuse making marriage rates often need “tuned” order achieve desired result.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"divorce-rates","dir":"","previous_headings":"","what":"Divorce rates","title":"SOCSIM oversimplified","text":"Divorce rates specified event identifier divorce. Divorce unusual among Socsim events ’s rates apply age one spouse rather age marriage. thus generally necessary specify divorce rates sexes.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"fertility-rates","dir":"","previous_headings":"","what":"Fertility rates","title":"SOCSIM oversimplified","text":"Fertility rates specified identifier birth different rates two ways: parity specific. default parity (n-1) necessary specify rates parity zero. rates rather probabilities. multiplying rate number months age category gives expected number births woman lives age category experience.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"transition-rates","dir":"","previous_headings":"","what":"Transition rates","title":"SOCSIM oversimplified","text":"Transition rates give rates “transition” one group another. default, transitions occur, however, initial population contains one group group inheritance rule determines group identity new borns. Transition rates specified identifier transit different rates group rate applies group event cause person belong must specified. specify transition rates group 1 group 2 single males, one write following: noted Figure [fig:rateDefaults], transition rates defaults. rates specified order take effect.","code":"trasit 1 M single 2"},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"duration-specific-transition-rates","dir":"","previous_headings":"Transition rates","what":"Duration specific transition rates","title":"SOCSIM oversimplified","text":"often useful transition rates duration rather age specific. words, probability transition event occurring can depend time since individual transitioned current group rather individual’s age. order distinction matter, person must experienced least one transition wise time spent group equivalent person’s age. Divorce rates always duration specific, transition rates may vary either age duration. format specifying transition rate blocks regardless whether age duration specific. tell Socsim particular rate block meant duration specific, add directive: duration_specific : duration_specific transit 4 F married 5 directive encountered, log file indicate transition rates group 4 group 5 married females duration rather age specific. default transition rates age specific indication given log file condition. possible age duration specific transition rates effect simulation, however, one transition rate block allowed per pair groups. transitions say group 3 group 5 single males must either age duration specific, whichever , effect transitions group 3 group 5 married males. One may age specific may duration specific. noted Section 4.4, duration_specific directive replace keywords define rate block.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"event-competition","dir":"","previous_headings":"","what":"Event competition","title":"SOCSIM oversimplified","text":"start every month simulation, every living person exactly one event scheduled future date. course month, scheduled events executed. Events affect individuals scheduled may also affect spouses others connected. births, deaths, marriages group transitions scheduled current month executed random order. person’s event executed, unless event death, new event must scheduled. New events scheduled “event competition.” event competition also held living person beginning simulation segment (, every time demographic rates societal constants change). event individual risk (e.g., men rarely give birth) can modeled piecewise exponential distribution. random number used generate waiting time event occurs (bounded individual’s maximum possible age death). individual’s next event one shortest randomly generated waiting time. event competition thus follows competing risk framework wherein probability event independent others.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"generating-potential-waiting-times","dir":"","previous_headings":"","what":"Generating potential waiting times","title":"SOCSIM oversimplified","text":"waiting time algorithm conceptually equivalent drawing random number u, uniform (0,1) distribution, calling u probability event yet occurred, finding first month probability non-occurrence less equal u. probability event occurred particular month T given expression [ {t=0..T} (1-p{t})] Y_(t=0…T) (1 − p_t) (p_t) probability event’s occurrence period t conditioned occurred time t. Since (1-p_t) always 0 1, expression given nonincreasing (T). Consequently, beginning (t = 0) can successively multiply (1-p_t) terms together value product falls u. Socsim mathematically equivalent procedure, however, implementation function datev takes advantage fact probabilities can months years works powers ((1-p_t).","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"heterogeneity-multipliers","dir":"","previous_headings":"","what":"Heterogeneity multipliers","title":"SOCSIM oversimplified","text":"Heterogeneity beyond follows algorithm described Section 8.9 often desirable microsimulation. Socsim increases heterogeneity fertility example, order create realistic sibling set sizes allow heritability fertility. Heterogeneity mortality group transitions included default much code place allow users add features easily way makes sense particular simulation. general principle person risk event given value () drawn distribution mean=1 hazard rates used generating individual’s waiting time event multiplied (), (E(h)=h). (h) original hazard event. Thus overall population’s event history still reflect rate structure greater variance/heterogeneity.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"fertility-multiplier-fmult","dir":"","previous_headings":"","what":"Fertility multiplier (fmult)","title":"SOCSIM oversimplified","text":"heterogeneous fertility option,(hetfert) enabled, female population assigned fertility multiplier. initial population multipliers may read .opop file may generated Socsim. Females born simulation multipliers generated Socsim. assigned, fertility multipliers remain woman entire life increasing reducing proportionally hazard giving birth . current implementation, individual fertility multipliers, fmults, pseudorandomly distributed cubic approximation beta distribution mean 1.0, variance 0.416, range 0 2.4. Fertility heterogeneity also heritable degree determined user specified directives alpha beta.","code":""},{"path":"https://mpidr.github.io/rsocsim/socsim_oversimplified.html","id":"inheritance-of-fertility-multipliers","dir":"","previous_headings":"","what":"Inheritance of Fertility Multipliers","title":"SOCSIM oversimplified","text":"degree heterogeneous fertility inherited determined alpha (()) beta (()) directives. Equation [eq:inheritfert] defines algorithm used effect inheritance. birth females first assigned fertility multiplier according beta distribution described Section 9.1 () Equation [eq:inheritfert]. temporary variable (x) gets () weighted average () ego’s mother’s fertility multiplier. () (x) daughter’s fertility multiplier. Otherwise modified second equation. ] [1] extent “plan” ↩︎ [2] Groups additional category can used extend Socsim interesting ways. Groups described little detail Section 2.1 ↩︎ [3] One can start Socsim initial population complete kin network, typically purpose whole exercise generate simulated kinship network. ↩︎ [4] simulation segment period simulated time single set vital rates effect ↩︎ [5]  Socsim, yet handle sex marriage. Sorry! ↩︎ [6] may also read write file extra variables file transition history ↩︎ [7]  best practice rely .opop file’s pid ordering convention can broken initial population file ↩︎","code":"[4]:    x = α ∗ fmult_mother + (1 − α) ∗ γ   (5)    fmult_daughter = 2.5 ∗ exp (β∗log(x/2.5 ))"},{"path":"https://mpidr.github.io/rsocsim/news/index.html","id":"rsocsim-158","dir":"Changelog","previous_headings":"","what":"rsocsim 1.5.8","title":"rsocsim 1.5.8","text":"renamed getKin() retrieve_kin() bugfixes","code":""},{"path":"https://mpidr.github.io/rsocsim/news/index.html","id":"rsocsim-157","dir":"Changelog","previous_headings":"","what":"rsocsim 1.5.7","title":"rsocsim 1.5.7","text":"bugfixes","code":""},{"path":"https://mpidr.github.io/rsocsim/news/index.html","id":"rsocsim-156","dir":"Changelog","previous_headings":"","what":"rsocsim 1.5.6","title":"rsocsim 1.5.6","text":"read_opop read_omar works linux windows, also future clustercall. Mac tested, linux sometimes flaky","code":""},{"path":"https://mpidr.github.io/rsocsim/news/index.html","id":"rsocsim-155","dir":"Changelog","previous_headings":"","what":"rsocsim 1.5.5","title":"rsocsim 1.5.5","text":"compiles runs Linux reorganized contributed code Liliana Mallika todo: tests contributed code. use functions? todo: install run Mac","code":""},{"path":"https://mpidr.github.io/rsocsim/news/index.html","id":"rsocsim-154","dir":"Changelog","previous_headings":"","what":"rsocsim 1.5.4","title":"rsocsim 1.5.4","text":"Max age 200 years allows simulations without marriage rates mothers marry immediately childbirth married already","code":""},{"path":"https://mpidr.github.io/rsocsim/news/index.html","id":"rsocsim-153","dir":"Changelog","previous_headings":"","what":"rsocsim 1.5.3","title":"rsocsim 1.5.3","text":"compiles Github now use pkgdown generate documentation-website","code":""}]
